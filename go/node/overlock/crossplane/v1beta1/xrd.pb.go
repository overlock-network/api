// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: overlock/crossplane/v1beta1/xrd.proto

package v1beta1

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Complete CompositeResourceDefinition object.
type CompositeResourceDefinition struct {
	Id       uint64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Metadata *Metadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec     *XrdSpec  `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (m *CompositeResourceDefinition) Reset()         { *m = CompositeResourceDefinition{} }
func (m *CompositeResourceDefinition) String() string { return proto.CompactTextString(m) }
func (*CompositeResourceDefinition) ProtoMessage()    {}
func (*CompositeResourceDefinition) Descriptor() ([]byte, []int) {
	return fileDescriptor_3076793733682cca, []int{0}
}
func (m *CompositeResourceDefinition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompositeResourceDefinition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CompositeResourceDefinition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CompositeResourceDefinition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompositeResourceDefinition.Merge(m, src)
}
func (m *CompositeResourceDefinition) XXX_Size() int {
	return m.Size()
}
func (m *CompositeResourceDefinition) XXX_DiscardUnknown() {
	xxx_messageInfo_CompositeResourceDefinition.DiscardUnknown(m)
}

var xxx_messageInfo_CompositeResourceDefinition proto.InternalMessageInfo

func (m *CompositeResourceDefinition) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CompositeResourceDefinition) GetMetadata() *Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *CompositeResourceDefinition) GetSpec() *XrdSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

// Main CompositeResourceDefinition spec structure.
type XrdSpec struct {
	Group    string         `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	Names    *ResourceNames `protobuf:"bytes,2,opt,name=names,proto3" json:"names,omitempty"`
	Versions []*Version     `protobuf:"bytes,3,rep,name=versions,proto3" json:"versions,omitempty"`
}

func (m *XrdSpec) Reset()         { *m = XrdSpec{} }
func (m *XrdSpec) String() string { return proto.CompactTextString(m) }
func (*XrdSpec) ProtoMessage()    {}
func (*XrdSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_3076793733682cca, []int{1}
}
func (m *XrdSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *XrdSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_XrdSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *XrdSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XrdSpec.Merge(m, src)
}
func (m *XrdSpec) XXX_Size() int {
	return m.Size()
}
func (m *XrdSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_XrdSpec.DiscardUnknown(m)
}

var xxx_messageInfo_XrdSpec proto.InternalMessageInfo

func (m *XrdSpec) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func (m *XrdSpec) GetNames() *ResourceNames {
	if m != nil {
		return m.Names
	}
	return nil
}

func (m *XrdSpec) GetVersions() []*Version {
	if m != nil {
		return m.Versions
	}
	return nil
}

// Names of the resource in singular, plural, and kind forms.
type ResourceNames struct {
	Kind   string `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	Plural string `protobuf:"bytes,2,opt,name=plural,proto3" json:"plural,omitempty"`
}

func (m *ResourceNames) Reset()         { *m = ResourceNames{} }
func (m *ResourceNames) String() string { return proto.CompactTextString(m) }
func (*ResourceNames) ProtoMessage()    {}
func (*ResourceNames) Descriptor() ([]byte, []int) {
	return fileDescriptor_3076793733682cca, []int{2}
}
func (m *ResourceNames) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResourceNames) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResourceNames.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResourceNames) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceNames.Merge(m, src)
}
func (m *ResourceNames) XXX_Size() int {
	return m.Size()
}
func (m *ResourceNames) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceNames.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceNames proto.InternalMessageInfo

func (m *ResourceNames) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *ResourceNames) GetPlural() string {
	if m != nil {
		return m.Plural
	}
	return ""
}

// Defines each version of the CRD.
type Version struct {
	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Schema string `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
}

func (m *Version) Reset()         { *m = Version{} }
func (m *Version) String() string { return proto.CompactTextString(m) }
func (*Version) ProtoMessage()    {}
func (*Version) Descriptor() ([]byte, []int) {
	return fileDescriptor_3076793733682cca, []int{3}
}
func (m *Version) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Version) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Version.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Version) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Version.Merge(m, src)
}
func (m *Version) XXX_Size() int {
	return m.Size()
}
func (m *Version) XXX_DiscardUnknown() {
	xxx_messageInfo_Version.DiscardUnknown(m)
}

var xxx_messageInfo_Version proto.InternalMessageInfo

func (m *Version) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Version) GetSchema() string {
	if m != nil {
		return m.Schema
	}
	return ""
}

func init() {
	proto.RegisterType((*CompositeResourceDefinition)(nil), "overlock.crossplane.v1beta1.CompositeResourceDefinition")
	proto.RegisterType((*XrdSpec)(nil), "overlock.crossplane.v1beta1.XrdSpec")
	proto.RegisterType((*ResourceNames)(nil), "overlock.crossplane.v1beta1.ResourceNames")
	proto.RegisterType((*Version)(nil), "overlock.crossplane.v1beta1.Version")
}

func init() {
	proto.RegisterFile("overlock/crossplane/v1beta1/xrd.proto", fileDescriptor_3076793733682cca)
}

var fileDescriptor_3076793733682cca = []byte{
	// 374 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xcb, 0x8a, 0xdb, 0x30,
	0x14, 0x86, 0xa3, 0xdc, 0xa3, 0xd2, 0x2e, 0x44, 0x29, 0xa6, 0x01, 0x13, 0x4c, 0x03, 0x21, 0x10,
	0x8b, 0xb4, 0x14, 0x0a, 0xdd, 0xa4, 0xb7, 0x65, 0xbb, 0x50, 0xa1, 0x94, 0x6e, 0x8a, 0x6c, 0x9f,
	0x26, 0x22, 0xb6, 0x24, 0x24, 0xdb, 0x9d, 0xc7, 0x98, 0x77, 0x98, 0xdd, 0x3c, 0xc9, 0x2c, 0xb3,
	0x9c, 0xe5, 0x90, 0xbc, 0xc8, 0xe0, 0x5b, 0x86, 0xd9, 0x78, 0x76, 0x3a, 0xe2, 0xff, 0x7e, 0xbe,
	0x03, 0x07, 0xcf, 0x55, 0x0e, 0x26, 0x56, 0xe1, 0x9e, 0x86, 0x46, 0x59, 0xab, 0x63, 0x2e, 0x81,
	0xe6, 0xeb, 0x00, 0x52, 0xbe, 0xa6, 0x17, 0x26, 0xf2, 0xb5, 0x51, 0xa9, 0x22, 0xd3, 0x26, 0xe6,
	0x3f, 0xc4, 0xfc, 0x3a, 0xf6, 0x7a, 0xd9, 0xd6, 0x91, 0x40, 0xca, 0x23, 0x9e, 0xf2, 0xaa, 0xc8,
	0xbb, 0x46, 0x78, 0xfa, 0x45, 0x25, 0x5a, 0x59, 0x91, 0x02, 0x03, 0xab, 0x32, 0x13, 0xc2, 0x57,
	0xf8, 0x27, 0xa4, 0x48, 0x85, 0x92, 0xe4, 0x05, 0xee, 0x8a, 0xc8, 0x41, 0x33, 0xb4, 0xe8, 0xb3,
	0xae, 0x88, 0xc8, 0x27, 0x3c, 0x6e, 0x1a, 0x9c, 0xee, 0x0c, 0x2d, 0x9e, 0xbd, 0x9d, 0xfb, 0x2d,
	0x2e, 0xfe, 0xf7, 0x3a, 0xcc, 0xce, 0x18, 0xf9, 0x80, 0xfb, 0x56, 0x43, 0xe8, 0xf4, 0x4a, 0xfc,
	0x4d, 0x2b, 0xfe, 0xdb, 0x44, 0x3f, 0x35, 0x84, 0xac, 0x24, 0xbc, 0x2b, 0x84, 0x47, 0xf5, 0x0f,
	0x79, 0x89, 0x07, 0x5b, 0xa3, 0x32, 0x5d, 0xba, 0x4d, 0x58, 0x35, 0x90, 0x0d, 0x1e, 0x48, 0x9e,
	0x80, 0xad, 0xdd, 0x96, 0xad, 0xe5, 0xcd, 0xba, 0x3f, 0x0a, 0x82, 0x55, 0x20, 0xd9, 0xe0, 0x71,
	0x0e, 0xc6, 0x0a, 0x25, 0xad, 0xd3, 0x9b, 0xf5, 0x9e, 0x34, 0xfc, 0x55, 0x85, 0xd9, 0x99, 0xf2,
	0x3e, 0xe2, 0xe7, 0x8f, 0x9a, 0x09, 0xc1, 0xfd, 0xbd, 0x90, 0x51, 0x6d, 0x5a, 0xbe, 0xc9, 0x2b,
	0x3c, 0xd4, 0x71, 0x66, 0x78, 0x5c, 0x9a, 0x4e, 0x58, 0x3d, 0x79, 0xef, 0xf1, 0xa8, 0x6e, 0x2c,
	0xb0, 0x42, 0xa9, 0xc1, 0x8a, 0x77, 0x81, 0xd9, 0x70, 0x07, 0x09, 0x6f, 0xb0, 0x6a, 0xfa, 0xfc,
	0xf7, 0xe6, 0xe8, 0xa2, 0xc3, 0xd1, 0x45, 0x77, 0x47, 0x17, 0x5d, 0x9e, 0xdc, 0xce, 0xe1, 0xe4,
	0x76, 0x6e, 0x4f, 0x6e, 0xe7, 0xcf, 0xb7, 0xad, 0x48, 0x77, 0x59, 0xe0, 0x87, 0x2a, 0xa1, 0xff,
	0x21, 0x58, 0x59, 0xc8, 0x41, 0xd2, 0x66, 0xa3, 0x15, 0xd7, 0x82, 0x6e, 0x15, 0x95, 0x2a, 0x02,
	0xda, 0x72, 0x36, 0xc1, 0xb0, 0x3c, 0x97, 0x77, 0xf7, 0x01, 0x00, 0x00, 0xff, 0xff, 0x73, 0xcb,
	0xb2, 0x76, 0xa0, 0x02, 0x00, 0x00,
}

func (m *CompositeResourceDefinition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompositeResourceDefinition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompositeResourceDefinition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Spec != nil {
		{
			size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintXrd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintXrd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintXrd(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *XrdSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *XrdSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *XrdSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Versions) > 0 {
		for iNdEx := len(m.Versions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Versions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintXrd(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Names != nil {
		{
			size, err := m.Names.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintXrd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Group) > 0 {
		i -= len(m.Group)
		copy(dAtA[i:], m.Group)
		i = encodeVarintXrd(dAtA, i, uint64(len(m.Group)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResourceNames) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResourceNames) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResourceNames) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Plural) > 0 {
		i -= len(m.Plural)
		copy(dAtA[i:], m.Plural)
		i = encodeVarintXrd(dAtA, i, uint64(len(m.Plural)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Kind) > 0 {
		i -= len(m.Kind)
		copy(dAtA[i:], m.Kind)
		i = encodeVarintXrd(dAtA, i, uint64(len(m.Kind)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Version) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Version) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Version) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Schema) > 0 {
		i -= len(m.Schema)
		copy(dAtA[i:], m.Schema)
		i = encodeVarintXrd(dAtA, i, uint64(len(m.Schema)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintXrd(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintXrd(dAtA []byte, offset int, v uint64) int {
	offset -= sovXrd(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CompositeResourceDefinition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovXrd(uint64(m.Id))
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovXrd(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovXrd(uint64(l))
	}
	return n
}

func (m *XrdSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Group)
	if l > 0 {
		n += 1 + l + sovXrd(uint64(l))
	}
	if m.Names != nil {
		l = m.Names.Size()
		n += 1 + l + sovXrd(uint64(l))
	}
	if len(m.Versions) > 0 {
		for _, e := range m.Versions {
			l = e.Size()
			n += 1 + l + sovXrd(uint64(l))
		}
	}
	return n
}

func (m *ResourceNames) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Kind)
	if l > 0 {
		n += 1 + l + sovXrd(uint64(l))
	}
	l = len(m.Plural)
	if l > 0 {
		n += 1 + l + sovXrd(uint64(l))
	}
	return n
}

func (m *Version) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovXrd(uint64(l))
	}
	l = len(m.Schema)
	if l > 0 {
		n += 1 + l + sovXrd(uint64(l))
	}
	return n
}

func sovXrd(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozXrd(x uint64) (n int) {
	return sovXrd(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CompositeResourceDefinition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXrd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompositeResourceDefinition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompositeResourceDefinition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXrd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXrd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXrd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthXrd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &Metadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXrd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXrd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthXrd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &XrdSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXrd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthXrd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *XrdSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXrd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: XrdSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: XrdSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXrd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthXrd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthXrd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Group = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Names", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXrd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXrd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthXrd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Names == nil {
				m.Names = &ResourceNames{}
			}
			if err := m.Names.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Versions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXrd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXrd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthXrd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Versions = append(m.Versions, &Version{})
			if err := m.Versions[len(m.Versions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXrd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthXrd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResourceNames) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXrd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourceNames: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourceNames: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXrd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthXrd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthXrd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kind = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plural", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXrd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthXrd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthXrd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Plural = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXrd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthXrd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Version) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXrd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Version: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Version: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXrd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthXrd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthXrd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schema", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXrd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthXrd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthXrd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Schema = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXrd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthXrd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipXrd(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowXrd
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowXrd
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowXrd
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthXrd
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupXrd
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthXrd
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthXrd        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowXrd          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupXrd = fmt.Errorf("proto: unexpected end of group")
)
