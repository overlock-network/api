// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: overlock/storage/v1beta1/oci_registry.proto

package v1beta1

import (
	fmt "fmt"
	v1beta1 "github.com/web-seven/overlock-api/go/node/overlock/crossplane/v1beta1"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// OCIRegistry
type OCIRegistry struct {
	// id
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// creator
	Creator string `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	// metadata
	Metadata *v1beta1.Metadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// spec
	Spec *RegistrySpec `protobuf:"bytes,4,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (m *OCIRegistry) Reset()         { *m = OCIRegistry{} }
func (m *OCIRegistry) String() string { return proto.CompactTextString(m) }
func (*OCIRegistry) ProtoMessage()    {}
func (*OCIRegistry) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6f6a211e680308a, []int{0}
}
func (m *OCIRegistry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OCIRegistry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OCIRegistry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OCIRegistry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OCIRegistry.Merge(m, src)
}
func (m *OCIRegistry) XXX_Size() int {
	return m.Size()
}
func (m *OCIRegistry) XXX_DiscardUnknown() {
	xxx_messageInfo_OCIRegistry.DiscardUnknown(m)
}

var xxx_messageInfo_OCIRegistry proto.InternalMessageInfo

func (m *OCIRegistry) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *OCIRegistry) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *OCIRegistry) GetMetadata() *v1beta1.Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *OCIRegistry) GetSpec() *RegistrySpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

// RegistrySpec
type RegistrySpec struct {
	// url
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// type
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// provider
	Provider string `protobuf:"bytes,3,opt,name=provider,proto3" json:"provider,omitempty"`
}

func (m *RegistrySpec) Reset()         { *m = RegistrySpec{} }
func (m *RegistrySpec) String() string { return proto.CompactTextString(m) }
func (*RegistrySpec) ProtoMessage()    {}
func (*RegistrySpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6f6a211e680308a, []int{1}
}
func (m *RegistrySpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegistrySpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegistrySpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegistrySpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegistrySpec.Merge(m, src)
}
func (m *RegistrySpec) XXX_Size() int {
	return m.Size()
}
func (m *RegistrySpec) XXX_DiscardUnknown() {
	xxx_messageInfo_RegistrySpec.DiscardUnknown(m)
}

var xxx_messageInfo_RegistrySpec proto.InternalMessageInfo

func (m *RegistrySpec) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *RegistrySpec) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *RegistrySpec) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

func init() {
	proto.RegisterType((*OCIRegistry)(nil), "overlock.storage.v1beta1.OCIRegistry")
	proto.RegisterType((*RegistrySpec)(nil), "overlock.storage.v1beta1.RegistrySpec")
}

func init() {
	proto.RegisterFile("overlock/storage/v1beta1/oci_registry.proto", fileDescriptor_e6f6a211e680308a)
}

var fileDescriptor_e6f6a211e680308a = []byte{
	// 324 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xbd, 0x4e, 0xf3, 0x30,
	0x14, 0x86, 0xeb, 0x36, 0xfa, 0xbe, 0xd6, 0x45, 0x08, 0x79, 0x8a, 0x3a, 0x44, 0x55, 0x25, 0x50,
	0x05, 0xc2, 0x56, 0x29, 0x2c, 0x4c, 0xfc, 0x4c, 0x0c, 0x08, 0x64, 0xb6, 0x2e, 0xc8, 0x75, 0xac,
	0x60, 0x91, 0xf6, 0x58, 0xce, 0x69, 0xa5, 0xde, 0x05, 0x57, 0xc3, 0x35, 0x30, 0x76, 0x64, 0x44,
	0xcd, 0x8d, 0x20, 0x42, 0x92, 0xb2, 0x74, 0x3b, 0x27, 0x7a, 0xdf, 0x27, 0x8f, 0x6d, 0x7a, 0x02,
	0x4b, 0xe3, 0x53, 0xd0, 0xaf, 0x22, 0x43, 0xf0, 0x2a, 0x31, 0x62, 0x39, 0x9a, 0x1a, 0x54, 0x23,
	0x01, 0xda, 0x3e, 0x7b, 0x93, 0xd8, 0x0c, 0xfd, 0x8a, 0x3b, 0x0f, 0x08, 0x2c, 0xac, 0xc2, 0xbc,
	0x0c, 0xf3, 0x32, 0xdc, 0x3b, 0xae, 0x31, 0xda, 0x43, 0x96, 0xb9, 0x54, 0xcd, 0xb7, 0xa4, 0x99,
	0x41, 0x15, 0x2b, 0x54, 0xbf, 0x94, 0xc1, 0x3b, 0xa1, 0xdd, 0x87, 0xdb, 0x3b, 0x59, 0xb2, 0xd9,
	0x3e, 0x6d, 0xda, 0x38, 0x24, 0x7d, 0x32, 0x0c, 0x64, 0xd3, 0xc6, 0x2c, 0xa4, 0xff, 0xb5, 0x37,
	0x0a, 0xc1, 0x87, 0xcd, 0x3e, 0x19, 0x76, 0x64, 0xb5, 0xb2, 0x6b, 0xda, 0xae, 0x58, 0x61, 0xab,
	0x4f, 0x86, 0xdd, 0xb3, 0x43, 0x5e, 0x2b, 0x6d, 0x7f, 0x5c, 0x59, 0xf1, 0xfb, 0x32, 0x2c, 0xeb,
	0x1a, 0xbb, 0xa4, 0x41, 0xe6, 0x8c, 0x0e, 0x83, 0xa2, 0x7e, 0xc4, 0x77, 0x9d, 0x88, 0x57, 0x7a,
	0x4f, 0xce, 0x68, 0x59, 0x74, 0x06, 0x8f, 0x74, 0xef, 0xef, 0x57, 0x76, 0x40, 0x5b, 0x0b, 0x9f,
	0x16, 0xe6, 0x1d, 0xf9, 0x33, 0x32, 0x46, 0x03, 0x5c, 0x39, 0x53, 0x7a, 0x17, 0x33, 0xeb, 0xd1,
	0xb6, 0xf3, 0xb0, 0xb4, 0xb1, 0xf1, 0x85, 0x74, 0x47, 0xd6, 0xfb, 0xcd, 0xe4, 0x63, 0x13, 0x91,
	0xf5, 0x26, 0x22, 0x5f, 0x9b, 0x88, 0xbc, 0xe5, 0x51, 0x63, 0x9d, 0x47, 0x8d, 0xcf, 0x3c, 0x6a,
	0x4c, 0xae, 0x12, 0x8b, 0x2f, 0x8b, 0x29, 0xd7, 0x30, 0x13, 0x5a, 0xa1, 0x4a, 0xed, 0xfc, 0xfc,
	0x62, 0x34, 0x16, 0x68, 0x32, 0x3c, 0x55, 0xce, 0x8a, 0x04, 0xc4, 0x1c, 0x62, 0x23, 0x76, 0xbd,
	0xdf, 0xf4, 0x5f, 0x71, 0xdb, 0xe3, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x6f, 0x53, 0xe9, 0xf6,
	0xe2, 0x01, 0x00, 0x00,
}

func (m *OCIRegistry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OCIRegistry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OCIRegistry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Spec != nil {
		{
			size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOciRegistry(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOciRegistry(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintOciRegistry(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintOciRegistry(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RegistrySpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegistrySpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegistrySpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintOciRegistry(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintOciRegistry(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintOciRegistry(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintOciRegistry(dAtA []byte, offset int, v uint64) int {
	offset -= sovOciRegistry(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *OCIRegistry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovOciRegistry(uint64(m.Id))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovOciRegistry(uint64(l))
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovOciRegistry(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovOciRegistry(uint64(l))
	}
	return n
}

func (m *RegistrySpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovOciRegistry(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovOciRegistry(uint64(l))
	}
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovOciRegistry(uint64(l))
	}
	return n
}

func sovOciRegistry(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOciRegistry(x uint64) (n int) {
	return sovOciRegistry(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OCIRegistry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOciRegistry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OCIRegistry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OCIRegistry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOciRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOciRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOciRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOciRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOciRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOciRegistry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOciRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &v1beta1.Metadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOciRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOciRegistry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOciRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &RegistrySpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOciRegistry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOciRegistry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegistrySpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOciRegistry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegistrySpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegistrySpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOciRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOciRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOciRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOciRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOciRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOciRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOciRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOciRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOciRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOciRegistry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOciRegistry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOciRegistry(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOciRegistry
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOciRegistry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOciRegistry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOciRegistry
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOciRegistry
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOciRegistry
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOciRegistry        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOciRegistry          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOciRegistry = fmt.Errorf("proto: unexpected end of group")
)
